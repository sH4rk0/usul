@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@implements IAsyncDisposable

    <form id="loginForm">
              <div class="form-group">
                <input
                  type="text"
                  class="form-control-input"
                  id="cusername"
                  required
                  data-pristine-not-empty="cusername"
                />
                <label class="label-control" for="cusername">Username</label>
                <div class="help-block with-errors"></div>
              </div>
              <div class="form-group">
                <input
                  type="password"
                  class="form-control-input"
                  id="cpassword"
                  required
                />
                <label class="label-control" for="cpassword">Password</label>
                <div class="help-block with-errors"></div>
              </div>

              <div class="form-group">
                <button
                  type="submit"
                  class="form-control btn-solid-reg popup-with-move-anim"
                  id="csubmit"
                >
                  Send
                </button>
              </div>

            </form>
<button class="btn btn-primary" @onclick="OnClick">Click me</button>

            @code {

                 private IJSObjectReference? loginScript;
  string Version { get { return "?v=" + DateTime.Now.Ticks.ToString(); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if(firstRender)
        {
            loginScript = await JS.InvokeAsync<IJSObjectReference>("import", "/public/login-bundle.js"+ Version);
            //await OnClick();
        }
      
    }

    private async Task OnClick() {
       if(loginScript is not null) await loginScript.InvokeVoidAsync("setupLogin");
    }

     async ValueTask IAsyncDisposable.DisposeAsync() {
        Console.WriteLine("dispose");
        if (loginScript is not null) {
            await loginScript.DisposeAsync();
        }
    }


     [JSInvokable]
    public static Task<AuthenticationState> doLogin()
    {

       var anonymous = new ClaimsIdentity();
       
    return  Task.FromResult(new AuthenticationState(new ClaimsPrincipal(anonymous)));
       //return Task.FromResult(true);
    }
}
